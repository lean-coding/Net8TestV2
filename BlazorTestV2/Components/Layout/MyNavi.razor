@using Microsoft.AspNetCore.Components.Authorization
@using BlazorTestV2.Service
@using System.Timers
@inject NavigationManager navi
@inject AuthenticationStateProvider provider
@inject MySyncService sync


<header id="header" class="header d-flex align-items-center fixed-top">

    <Bar Breakpoint="Breakpoint.Desktop" Width="Width.Is100" Margin="Margin.Is5.OnX">
        <BarBrand Width="Width.Is33">
            <a href="/" class="logo d-flex align-items-center me-auto me-lg-0">
                <h1 class="sitename">BlazorTest V2</h1>
                <span>.</span>
            </a>
        </BarBrand>
        <BarToggler />
        <BarMenu>
            <BarStart Padding="Padding.Is5.OnX">
                <BarItem>
                    <BarLink To="Index" Class="text-white m-2 h5">Home</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink To="MyUrl" Class="text-white m-2 h5">My URL</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink To="Member" Class="text-white m-2 h5">Membership</BarLink>
                </BarItem>
            </BarStart>

            <BarEnd>
                <BarItem>
                    <AuthorizeView>
                        <Authorized>
                            <Text TextColor="TextColor.White">Welcome! @context.User?.Identity?.Name</Text>
                             <Button Class="btn-getstarted h5" @onclick="HandleLogout">Log out</Button>
                        </Authorized>
                        <NotAuthorized>
                            <Button Class="btn-getstarted h5" @onclick="HandleLogon">Log on</Button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <Text TextColor="TextColor.Secondary" Class="m-3 h5">@(VistorCount.ToString() + " visitors online.")</Text>
                </BarItem>
            </BarEnd>
                
        </BarMenu>
    </Bar>

</header>

@code {
    private int VistorCount => sync.GetVisitorCount();
    private System.Timers.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        sync.OnVisitorChanged += this.OnVisitorChanged;
        sync.OnUserChanged += this.OnUserChanged;

        /*_timer = new();
        _timer.Interval = 4000; //每4秒更新一次
        _timer.Elapsed += new ElapsedEventHandler(OnTimedEvent1);
        _timer.Enabled = true;
        _timer.Start();*/
    }

    public async void OnTimedEvent1(object source, ElapsedEventArgs e)
    {
        var myProvider = (MyAuthenticationStateProvider)provider;
        await myProvider.CheckAuthenticationState();
    }


    private async Task HandleLogon()
    {
        navi.NavigateTo("/Logon");
    }

    private async Task HandleLogout()
    {
        var myProvider = (MyAuthenticationStateProvider)provider;
        await myProvider.UpdateState(null);
    }

    private async void OnUserChanged(object? sender, EventArgs e)
    {
        var myProvider = (MyAuthenticationStateProvider)provider;
        await myProvider.CheckAuthenticationState();
    }

    private void OnVisitorChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

}







