@page "/backyard"
@using BlazorTestV2.Database
@using System.Data
@inject ILogger<Backyard> Logger

<h3>Backyard</h3>

<!-- Section of Create SQLite Database -->
<Field>
    <FieldLabel>Create SQLite database</FieldLabel>
    <FieldBody>
        <Button Color="Color.Primary" @onclick="HandleCreateDB">Create DB</Button>
    </FieldBody>
</Field>

<!-- Section of Tables -->
<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Data Table</TableHeaderCell>
            <TableHeaderCell>Status</TableHeaderCell>
            <TableHeaderCell>Count</TableHeaderCell>
            <TableHeaderCell>Function</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (string table in tableList)
        {
            <TableRow>
                <TableRowHeader>@table</TableRowHeader>
                <TableRowCell>@GetDatatableStatus(table)</TableRowCell>
                    <TableRowCell>@GetDatatableCount(table)</TableRowCell>
                    <TableRowCell>
                        <Button Color="Color.Primary" onclick=@(() => CreateTable(table))>Create Table</Button>
                        <Button Color="Color.Primary" onclick=@(() => ViewRecord(table, 20))>View Record</Button>
                    </TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<!-- Section of Excution Message -->
<div>
    <Text>
        @((MarkupString)execMsg)
    </Text>
</div>

<!-- Section of Table Record -->
<div class="container">
    
    @if (!string.IsNullOrEmpty(selectedTable))
    {
        <Card>
            <CardHeader>
                Selected Table: @selectedTable
            </CardHeader>

            <CardBody>
                @if (dtView != null && dtView.Rows.Count > 0)
                {
                    <Table>
                        <TableHeader>
                            <TableRow>
                                @for (int i = 0; i < dtView.Columns.Count; i++)
                                {
                                    <td>@dtView.Columns[i].Caption</td>
                                    @* <TableHeaderCell>@dtView.Columns[i].Caption</TableHeaderCell> *@
                                }
                            </TableRow>
                        </TableHeader>
                         @foreach (DataRow dr in dtView.Rows)
                        {
                            <TableRow>
                                @for (int j = 0; j < dtView.Columns.Count; j++)
                                {
                                    <td>@dr[j].ToString()</td>
                                }
                            </TableRow>
                        }
                    </Table>
                }
                else
                {
                    <div class="row">No Record.</div>
                }
            </CardBody>
        </Card>
    }

</div>

@code {

    private string execMsg{ get; set; }
    private string selectedTable { get; set; }
    private DataTable dtView { get; set; }
    List<string> tableList = new List<string>
    {
        "M_URL", 
        "L_EventLog",
        "L_Validation",
        "Q_EMail",
        "S_Member"
    };

    #region 事件控制
    protected async Task HandleCreateDB()
    {
        try
        {
            string msg = Startup.CreateDatabase();
            MessageAppendLine(msg);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex.ToString());
            MessageAppendLine(ex);
        }
    }

    protected async Task CreateTable(string TableName)
    {
        try
        {
            string msg = Startup.CreateTable(TableName);
            MessageAppendLine(msg);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex.ToString());
            MessageAppendLine(ex);
        }
    }

    protected async Task ViewRecord(string TableName, int Top)
    {
        selectedTable = TableName;
        try
        {
            string sql = $"Select * From {TableName} LIMIT {Top}; ";
            dtView = SQLiteHelper.SqlTable(sql);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex.ToString());
            MessageAppendLine(ex);
        }
        StateHasChanged();
    }

    #endregion

    #region 私有函數
    private string GetDatatableStatus(string TableName)
    {
        try
        {
            return Startup.GetDatatableStatus(TableName);
        }
        catch (Exception ex)
        {
            MessageAppendLine(ex);
            Logger.LogWarning(ex.ToString());
            return "Got Error" + "<br/>";
        }
    }

    private string GetDatatableCount(string TableName)
    {
        try
        {
            return Startup.GetDatatableCount(TableName);
        }
        catch (Exception ex)
        {
            MessageAppendLine(ex);
            Logger.LogWarning(ex.ToString());
            return "";
        }
    }

    private void MessageAppendLine(object Message)
    {
        execMsg += Message.ToString() + "<br/>";
        StateHasChanged();
    }

    #endregion
}
